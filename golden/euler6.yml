# golden/euler6.yml
#  Найти разницу между квадратом суммы и суммой квадратов
#  первых ста натуральных чисел.

# -- Входные данные --
in_source: |-
  : CR 10 EMIT ;
  : DIGIT>CHAR 48 + ;
  : U.SIMPLE
      DUP 10 < IF
          DIGIT>CHAR EMIT
      ELSE
          10 /MOD SWAP U.SIMPLE DIGIT>CHAR EMIT
      THEN
  ;


  VARIABLE I_VAR           \ Счетчик цикла
  VARIABLE SUM             \ Для хранения (1 + 2 + ... + 100)
  VARIABLE SUM-OF-SQUARES  \ Для хранения (1*1 + 2*2 + ... + 100*100)


  : SOLVE-EULER-6
      0 SUM !
      0 SUM-OF-SQUARES !
      1 I_VAR !

      BEGIN
          I_VAR @ 101 <
      WHILE
          SUM @ I_VAR @ + SUM !

          I_VAR @ DUP *          \ ( i*i )
          SUM-OF-SQUARES @ +     \ ( sum_sq + i*i )
          SUM-OF-SQUARES !       \ Сохраняем

          I_VAR @ 1+ I_VAR !
      REPEAT

      SUM @ DUP *              \ ( square_of_sum )
      SUM-OF-SQUARES @         \ ( square_of_sum  sum_of_squares )
      -                        \ ( difference )

      U.SIMPLE
      CR
  ;

  SOLVE-EULER-6
  HALT

in_stdin: ''

# -- Эталонные выходные данные --
out_code: 
  yAABBsQDAACUBAAAmIT/AYiDAADQAAAAlAQAAJiE/wCEgwAAwGAAANAAAADEAwAAwGAAAMBgAADQAAAAxAMAAMQEAADAYAAAwIAAANAAAADEBQAAxAQAAMQDAADAgAAAwKAAAMBgAADQAAAAxAMAANAAAADEBAAAxAMAAGBkGADAYAAA0AAAAMQDAACAYwABwGAAANAAAADEAwAAxAQAAMCAAADAYAAAwIAAANAAAADEBAAAxAMAAMBgAADAgAAAwGAAAMCAAADQAAAAxAMAAIRjAADAYAAA0AAAAMQEAADEAwAAUGQoAExkOADA4AAAwKAAANAAAADEAwAAgGMAAsBgAADQAAAAxAMAAIBj///AYAAA0AAAAMQDAADEBAAA0AAAAMQDAADEBAAAiGQAANAAAADEAwAAgAQAAGBkGADAYAAA0AAAAMQEAADEAwAAYGQoAIAEAAFcpBgAwGAAANAAAADEBAAAxAMAAERkKACAAwAfaKMoAMCgAADQAAAAxAQAAMQDAADAgAAAwGAAAMwAAFnQAAAAzAAAYMwAAE3QAAAAzAAAYMQDAACABAABXGQYAMBgAADQAAAAzAAAWcwAAE3QAAAAxAMAAIAEAABgZCgAgAQAAVykGADAYAAA0AAAAIADAArAYAAAzAAAAdAAAADEAwAAhGQAAIBjAAGMBAAKwGAAAMCAAACEZQAAwKAAAMwAAAHEBAAAxAMAAIBjAAGAhP//yAAAgNAAAACAAwAKwGAAAMwAAAHQAAAAgAMAMMBgAADEBAAAxAMAAEBkGADAYAAA0AAAAMwAAAuAAwAKwGAAAMwAAFnEAwAAjAMAA8wAAJDMAAAByAAAp4ADAArAYAAAzAAAN8wAAA/MAACXzAAAkMwAAAHQAAAAgAMAAMBgAACUAwAAmGMBCsBgAADMAABJgAMAAMBgAACUAwAAmGMBC8BgAADMAABJgAMAAcBgAACUAwAAmGMBCcBgAADMAABJlAMAAJhjAQnAYAAAzAAAM4ADAGXAYAAAzAAAWcQDAACMAwAvlAMAAJhjAQrAYAAAzAAAM5QDAACYYwEJwGAAAMwAADPEBAAAxAMAAEBkGADAYAAAlAMAAJhjAQrAYAAAzAAASZQDAACYYwEJwGAAAMwAADPMAAALxAQAAMQDAABIZBgAwGAAAJQDAACYYwELwGAAAMwAADPEBAAAxAMAAEBkGADAYAAAlAMAAJhjAQvAYAAAzAAASZQDAACYYwEJwGAAAMwAADPMAAAilAMAAJhjAQnAYAAAzAAAScgAALqUAwAAmGMBCsBgAADMAAAzzAAAC8QEAADEAwAASGQYAMBgAACUAwAAmGMBC8BgAADMAAAzxAQAAMQDAABEZBgAwGAAAMwAAJfMAACM0AAAAMwAAKgEAAAABAAAAAAAAAAAAAAAAAAAAA==
out_code_hex: |
  ; Source: <source_path>
  ; Code section (size: 1060 bytes)
  0x0000: C8000106  JMP   0x0000106
  0x0001: C4030000  POP   R3
  0x0002: 94040000  LUI   R4, 0x0000
  0x0003: 9884FF01  ORI   R4, R4, 65281
  0x0004: 88830000  STORE R3, 0(R4)
  0x0005: D0000000  RET
  0x0006: 94040000  LUI   R4, 0x0000
  0x0007: 9884FF00  ORI   R4, R4, 65280
  0x0008: 84830000  LOAD  R3, 0(R4)
  0x0009: C0600000  PUSH  R3
  0x000A: D0000000  RET
  0x000B: C4030000  POP   R3
  0x000C: C0600000  PUSH  R3
  0x000D: C0600000  PUSH  R3
  0x000E: D0000000  RET
  0x000F: C4030000  POP   R3
  0x0010: C4040000  POP   R4
  0x0011: C0600000  PUSH  R3
  0x0012: C0800000  PUSH  R4
  0x0013: D0000000  RET
  0x0014: C4050000  POP   R5
  0x0015: C4040000  POP   R4
  0x0016: C4030000  POP   R3
  0x0017: C0800000  PUSH  R4
  0x0018: C0A00000  PUSH  R5
  0x0019: C0600000  PUSH  R3
  0x001A: D0000000  RET
  0x001B: C4030000  POP   R3
  0x001C: D0000000  RET
  0x001D: C4040000  POP   R4
  0x001E: C4030000  POP   R3
  0x001F: 60641800  CMP   R3, R3, R4
  0x0020: C0600000  PUSH  R3
  0x0021: D0000000  RET
  0x0022: C4030000  POP   R3
  0x0023: 80630001  ADDI  R3, R3, 1
  0x0024: C0600000  PUSH  R3
  0x0025: D0000000  RET
  0x0026: C4030000  POP   R3
  0x0027: C4040000  POP   R4
  0x0028: C0800000  PUSH  R4
  0x0029: C0600000  PUSH  R3
  0x002A: C0800000  PUSH  R4
  0x002B: D0000000  RET
  0x002C: C4040000  POP   R4
  0x002D: C4030000  POP   R3
  0x002E: C0600000  PUSH  R3
  0x002F: C0800000  PUSH  R4
  0x0030: C0600000  PUSH  R3
  0x0031: C0800000  PUSH  R4
  0x0032: D0000000  RET
  0x0033: C4030000  POP   R3
  0x0034: 84630000  LOAD  R3, 0(R3)
  0x0035: C0600000  PUSH  R3
  0x0036: D0000000  RET
  0x0037: C4040000  POP   R4
  0x0038: C4030000  POP   R3
  0x0039: 50642800  MOD   R5, R3, R4
  0x003A: 4C643800  DIV   R7, R3, R4
  0x003B: C0E00000  PUSH  R7
  0x003C: C0A00000  PUSH  R5
  0x003D: D0000000  RET
  0x003E: C4030000  POP   R3
  0x003F: 80630002  ADDI  R3, R3, 2
  0x0040: C0600000  PUSH  R3
  0x0041: D0000000  RET
  0x0042: C4030000  POP   R3
  0x0043: 8063FFFF  ADDI  R3, R3, -1
  0x0044: C0600000  PUSH  R3
  0x0045: D0000000  RET
  0x0046: C4030000  POP   R3
  0x0047: C4040000  POP   R4
  0x0048: D0000000  RET
  0x0049: C4030000  POP   R3
  0x004A: C4040000  POP   R4
  0x004B: 88640000  STORE R4, 0(R3)
  0x004C: D0000000  RET
  0x004D: C4030000  POP   R3
  0x004E: 80040000  ADDI  R4, R0, 0
  0x004F: 60641800  CMP   R3, R3, R4
  0x0050: C0600000  PUSH  R3
  0x0051: D0000000  RET
  0x0052: C4040000  POP   R4
  0x0053: C4030000  POP   R3
  0x0054: 60642800  CMP   R5, R3, R4
  0x0055: 80040001  ADDI  R4, R0, 1
  0x0056: 5CA41800  XOR   R3, R5, R4
  0x0057: C0600000  PUSH  R3
  0x0058: D0000000  RET
  0x0059: C4040000  POP   R4
  0x005A: C4030000  POP   R3
  0x005B: 44642800  SUB   R5, R3, R4
  0x005C: 8003001F  ADDI  R3, R0, 31
  0x005D: 68A32800  SHR   R5, R5, R3
  0x005E: C0A00000  PUSH  R5
  0x005F: D0000000  RET
  0x0060: C4040000  POP   R4
  0x0061: C4030000  POP   R3
  0x0062: C0800000  PUSH  R4
  0x0063: C0600000  PUSH  R3
  0x0064: CC000059  CALL  0x0000059
  0x0065: D0000000  RET
  0x0066: CC000060  CALL  0x0000060
  0x0067: CC00004D  CALL  0x000004D
  0x0068: D0000000  RET
  0x0069: CC000060  CALL  0x0000060
  0x006A: C4030000  POP   R3
  0x006B: 80040001  ADDI  R4, R0, 1
  0x006C: 5C641800  XOR   R3, R3, R4
  0x006D: C0600000  PUSH  R3
  0x006E: D0000000  RET
  0x006F: CC000059  CALL  0x0000059
  0x0070: CC00004D  CALL  0x000004D
  0x0071: D0000000  RET
  0x0072: C4030000  POP   R3
  0x0073: 80040000  ADDI  R4, R0, 0
  0x0074: 60642800  CMP   R5, R3, R4
  0x0075: 80040001  ADDI  R4, R0, 1
  0x0076: 5CA41800  XOR   R3, R5, R4
  0x0077: C0600000  PUSH  R3
  0x0078: D0000000  RET
  0x0079: 8003000A  ADDI  R3, R0, 10
  0x007A: C0600000  PUSH  R3
  0x007B: CC000001  CALL  0x0000001
  0x007C: D0000000  RET
  0x007D: C4030000  POP   R3
  0x007E: 84640000  LOAD  R4, 0(R3)
  0x007F: 80630001  ADDI  R3, R3, 1
  0x0080: 8C04000A  JZ    R4, 10
  0x0081: C0600000  PUSH  R3
  0x0082: C0800000  PUSH  R4
  0x0083: 84650000  LOAD  R5, 0(R3)
  0x0084: C0A00000  PUSH  R5
  0x0085: CC000001  CALL  0x0000001
  0x0086: C4040000  POP   R4
  0x0087: C4030000  POP   R3
  0x0088: 80630001  ADDI  R3, R3, 1
  0x0089: 8084FFFF  ADDI  R4, R4, -1
  0x008A: C8000080  JMP   0x0000080
  0x008B: D0000000  RET
  0x008C: 8003000A  ADDI  R3, R0, 10
  0x008D: C0600000  PUSH  R3
  0x008E: CC000001  CALL  0x0000001
  0x008F: D0000000  RET
  0x0090: 80030030  ADDI  R3, R0, 48
  0x0091: C0600000  PUSH  R3
  0x0092: C4040000  POP   R4
  0x0093: C4030000  POP   R3
  0x0094: 40641800  ADD   R3, R3, R4
  0x0095: C0600000  PUSH  R3
  0x0096: D0000000  RET
  0x0097: CC00000B  CALL  0x000000B
  0x0098: 8003000A  ADDI  R3, R0, 10
  0x0099: C0600000  PUSH  R3
  0x009A: CC000059  CALL  0x0000059
  0x009B: C4030000  POP   R3
  0x009C: 8C030003  JZ    R3, 3
  0x009D: CC000090  CALL  0x0000090
  0x009E: CC000001  CALL  0x0000001
  0x009F: C80000A7  JMP   0x00000A7
  0x00A0: 8003000A  ADDI  R3, R0, 10
  0x00A1: C0600000  PUSH  R3
  0x00A2: CC000037  CALL  0x0000037
  0x00A3: CC00000F  CALL  0x000000F
  0x00A4: CC000097  CALL  0x0000097
  0x00A5: CC000090  CALL  0x0000090
  0x00A6: CC000001  CALL  0x0000001
  0x00A7: D0000000  RET
  0x00A8: 80030000  ADDI  R3, R0, 0
  0x00A9: C0600000  PUSH  R3
  0x00AA: 94030000  LUI   R3, 0x0000
  0x00AB: 9863010A  ORI   R3, R3, 266
  0x00AC: C0600000  PUSH  R3
  0x00AD: CC000049  CALL  0x0000049
  0x00AE: 80030000  ADDI  R3, R0, 0
  0x00AF: C0600000  PUSH  R3
  0x00B0: 94030000  LUI   R3, 0x0000
  0x00B1: 9863010B  ORI   R3, R3, 267
  0x00B2: C0600000  PUSH  R3
  0x00B3: CC000049  CALL  0x0000049
  0x00B4: 80030001  ADDI  R3, R0, 1
  0x00B5: C0600000  PUSH  R3
  0x00B6: 94030000  LUI   R3, 0x0000
  0x00B7: 98630109  ORI   R3, R3, 265
  0x00B8: C0600000  PUSH  R3
  0x00B9: CC000049  CALL  0x0000049
  0x00BA: 94030000  LUI   R3, 0x0000
  0x00BB: 98630109  ORI   R3, R3, 265
  0x00BC: C0600000  PUSH  R3
  0x00BD: CC000033  CALL  0x0000033
  0x00BE: 80030065  ADDI  R3, R0, 101
  0x00BF: C0600000  PUSH  R3
  0x00C0: CC000059  CALL  0x0000059
  0x00C1: C4030000  POP   R3
  0x00C2: 8C03002F  JZ    R3, 47
  0x00C3: 94030000  LUI   R3, 0x0000
  0x00C4: 9863010A  ORI   R3, R3, 266
  0x00C5: C0600000  PUSH  R3
  0x00C6: CC000033  CALL  0x0000033
  0x00C7: 94030000  LUI   R3, 0x0000
  0x00C8: 98630109  ORI   R3, R3, 265
  0x00C9: C0600000  PUSH  R3
  0x00CA: CC000033  CALL  0x0000033
  0x00CB: C4040000  POP   R4
  0x00CC: C4030000  POP   R3
  0x00CD: 40641800  ADD   R3, R3, R4
  0x00CE: C0600000  PUSH  R3
  0x00CF: 94030000  LUI   R3, 0x0000
  0x00D0: 9863010A  ORI   R3, R3, 266
  0x00D1: C0600000  PUSH  R3
  0x00D2: CC000049  CALL  0x0000049
  0x00D3: 94030000  LUI   R3, 0x0000
  0x00D4: 98630109  ORI   R3, R3, 265
  0x00D5: C0600000  PUSH  R3
  0x00D6: CC000033  CALL  0x0000033
  0x00D7: CC00000B  CALL  0x000000B
  0x00D8: C4040000  POP   R4
  0x00D9: C4030000  POP   R3
  0x00DA: 48641800  MUL   R3, R3, R4
  0x00DB: C0600000  PUSH  R3
  0x00DC: 94030000  LUI   R3, 0x0000
  0x00DD: 9863010B  ORI   R3, R3, 267
  0x00DE: C0600000  PUSH  R3
  0x00DF: CC000033  CALL  0x0000033
  0x00E0: C4040000  POP   R4
  0x00E1: C4030000  POP   R3
  0x00E2: 40641800  ADD   R3, R3, R4
  0x00E3: C0600000  PUSH  R3
  0x00E4: 94030000  LUI   R3, 0x0000
  0x00E5: 9863010B  ORI   R3, R3, 267
  0x00E6: C0600000  PUSH  R3
  0x00E7: CC000049  CALL  0x0000049
  0x00E8: 94030000  LUI   R3, 0x0000
  0x00E9: 98630109  ORI   R3, R3, 265
  0x00EA: C0600000  PUSH  R3
  0x00EB: CC000033  CALL  0x0000033
  0x00EC: CC000022  CALL  0x0000022
  0x00ED: 94030000  LUI   R3, 0x0000
  0x00EE: 98630109  ORI   R3, R3, 265
  0x00EF: C0600000  PUSH  R3
  0x00F0: CC000049  CALL  0x0000049
  0x00F1: C80000BA  JMP   0x00000BA
  0x00F2: 94030000  LUI   R3, 0x0000
  0x00F3: 9863010A  ORI   R3, R3, 266
  0x00F4: C0600000  PUSH  R3
  0x00F5: CC000033  CALL  0x0000033
  0x00F6: CC00000B  CALL  0x000000B
  0x00F7: C4040000  POP   R4
  0x00F8: C4030000  POP   R3
  0x00F9: 48641800  MUL   R3, R3, R4
  0x00FA: C0600000  PUSH  R3
  0x00FB: 94030000  LUI   R3, 0x0000
  0x00FC: 9863010B  ORI   R3, R3, 267
  0x00FD: C0600000  PUSH  R3
  0x00FE: CC000033  CALL  0x0000033
  0x00FF: C4040000  POP   R4
  0x0100: C4030000  POP   R3
  0x0101: 44641800  SUB   R3, R3, R4
  0x0102: C0600000  PUSH  R3
  0x0103: CC000097  CALL  0x0000097
  0x0104: CC00008C  CALL  0x000008C
  0x0105: D0000000  RET
  0x0106: CC0000A8  CALL  0x00000A8
  0x0107: 04000000  HALT
  0x0108: 04000000  HALT

  ; Data section (size: 12 bytes)
  ; Data words (decimal):
  [0, 0, 0]
  ; Data words (hex):
  [0x00000000, 0x00000000, 0x00000000]
out_stdout: |
  Successfully translated <source_path> to <target_path>
  Total instructions: 265, Data size: 12 bytes
  ============================================================
  Code size: 265 words. Data size: 3 words.

  Simulation output: '25164150
  '
  Total ticks: 159100
out_log: |-
  INFO     root:translator.py:857 Patched variable 'SUM': LUI@idx=170 imm=0x0000, ORI@idx=171 imm=0x010A -> final_word_addr=0x0000010A
  INFO     root:translator.py:857 Patched variable 'SUM-OF-SQUARES': LUI@idx=176 imm=0x0000, ORI@idx=177 imm=0x010B -> final_word_addr=0x0000010B
  INFO     root:translator.py:857 Patched variable 'I_VAR': LUI@idx=182 imm=0x0000, ORI@idx=183 imm=0x0109 -> final_word_addr=0x00000109
  INFO     root:translator.py:857 Patched variable 'I_VAR': LUI@idx=186 imm=0x0000, ORI@idx=187 imm=0x0109 -> final_word_addr=0x00000109
  INFO     root:translator.py:857 Patched variable 'SUM': LUI@idx=195 imm=0x0000, ORI@idx=196 imm=0x010A -> final_word_addr=0x0000010A
  INFO     root:translator.py:857 Patched variable 'I_VAR': LUI@idx=199 imm=0x0000, ORI@idx=200 imm=0x0109 -> final_word_addr=0x00000109
  INFO     root:translator.py:857 Patched variable 'SUM': LUI@idx=207 imm=0x0000, ORI@idx=208 imm=0x010A -> final_word_addr=0x0000010A
  INFO     root:translator.py:857 Patched variable 'I_VAR': LUI@idx=211 imm=0x0000, ORI@idx=212 imm=0x0109 -> final_word_addr=0x00000109
  INFO     root:translator.py:857 Patched variable 'SUM-OF-SQUARES': LUI@idx=220 imm=0x0000, ORI@idx=221 imm=0x010B -> final_word_addr=0x0000010B
  INFO     root:translator.py:857 Patched variable 'SUM-OF-SQUARES': LUI@idx=228 imm=0x0000, ORI@idx=229 imm=0x010B -> final_word_addr=0x0000010B
  INFO     root:translator.py:857 Patched variable 'I_VAR': LUI@idx=232 imm=0x0000, ORI@idx=233 imm=0x0109 -> final_word_addr=0x00000109
  INFO     root:translator.py:857 Patched variable 'I_VAR': LUI@idx=237 imm=0x0000, ORI@idx=238 imm=0x0109 -> final_word_addr=0x00000109
  INFO     root:translator.py:857 Patched variable 'SUM': LUI@idx=242 imm=0x0000, ORI@idx=243 imm=0x010A -> final_word_addr=0x0000010A
  INFO     root:translator.py:857 Patched variable 'SUM-OF-SQUARES': LUI@idx=251 imm=0x0000, ORI@idx=252 imm=0x010B -> final_word_addr=0x0000010B
  INFO     root:machine.py:431 Starting simulation...
  INFO     root:machine.py:448 TICK:    0 | PC: 0x0000 | IR: 0x00000000 (NOP) | SP: 64536 | DSP: 60536 | MicroPC: 0 | Zero: False
  DEBUG    root:machine.py:291 TICK 1: Executing micro-op: LATCH_MAR_PC
  INFO     root:machine.py:448 TICK:    1 | PC: 0x0000 | IR: 0x00000000 (NOP) | SP: 64536 | DSP: 60536 | MicroPC: 1 | Zero: False
  DEBUG    root:machine.py:291 TICK 2: Executing micro-op: CACHE_READ
  WARNING  root:machine.py:61 CACHE: MISS on read at addr 0x0000. Accessing main memory.
  INFO     root:machine.py:448 TICK:    2 | PC: 0x0000 | IR: 0x00000000 (NOP) | SP: 64536 | DSP: 60536 | MicroPC: 2 | Zero: False
  INFO     root:machine.py:250 STALL: 8 cycles remaining.
  INFO     root:machine.py:448 TICK:    3 | PC: 0x0000 | IR: 0x00000000 (NOP) | SP: 64536 | DSP: 60536 | MicroPC: 2 | Zero: False
  INFO     root:machine.py:250 STALL: 7 cycles remaining.
  INFO     root:machine.py:448 TICK:    4 | PC: 0x0000 | IR: 0x00000000 (NOP) | SP: 64536 | DSP: 60536 | MicroPC: 2 | Zero: False
  INFO     root:machine.py:250 STALL: 6 cycles remaining.
  INFO     root:machine.py:448 TICK:    5 | PC: 0x0000 | IR: 0x00000000 (NOP) | SP: 64536 | DSP: 60536 | MicroPC: 2 | Zero: False
  INFO     root:machine.py:250 STALL: 5 cycles remaining.
  INFO     root:machine.py:448 TICK:    6 | PC: 0x0000 | IR: 0x00000000 (NOP) | SP: 64536 | DSP: 60536 | MicroPC: 2 | Zero: False
  INFO     root:machine.py:250 STALL: 4 cycles remaining.
  INFO     root:machine.py:448 TICK:    7 | PC: 0x0000 | IR: 0x00000000 (NOP) | SP: 64536 | DSP: 60536 | MicroPC: 2 | Zero: False
  INFO     root:machine.py:250 STALL: 3 cycles remaining.
  INFO     root:machine.py:448 TICK:    8 | PC: 0x0000 | IR: 0x00000000 (NOP) | SP: 64536 | DSP: 60536 | MicroPC: 2 | Zero: False
  INFO     root:machine.py:250 STALL: 2 cycles remaining.
  INFO     root:machine.py:448 TICK:    9 | PC: 0x0000 | IR: 0x00000000 (NOP) | SP: 64536 | DSP: 60536 | MicroPC: 2 | Zero: False
  INFO     root:machine.py:250 STALL: 1 cycles remaining.
  INFO     root:machine.py:448 TICK:   10 | PC: 0x0000 | IR: 0x00000000 (NOP) |
  ... (log truncated)
