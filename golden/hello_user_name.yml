# golden/hello_user_name.yml
# Спрашивает у пользователя имя, считывает его с потока ввода и приветствует его.

# -- Входные данные --
in_source: |-
  s" What is your name?" TYPE CR

  s" Hello, " TYPE

  BEGIN
      KEY DUP      \ ( char char ) -- читаем символ и дублируем
      10 <>        \ ( char flag ) -- сравниваем с ENTER, flag=true если НЕ ENTER
  WHILE
      DUP EMIT     \ ( char ) -- печатаем символ
  REPEAT

  2DROP

  s" !" TYPE
  HALT

in_stdin: "Admir\n"

# -- Эталонные выходные данные --

out_code: 
  yAAAjMQDAACUBAAAmIT/AYiDAADQAAAAlAQAAJiE/wCEgwAAwGAAANAAAADEAwAAwGAAAMBgAADQAAAAxAMAAMQEAADAYAAAwIAAANAAAADEBQAAxAQAAMQDAADAgAAAwKAAAMBgAADQAAAAxAMAANAAAADEBAAAxAMAAGBkGADAYAAA0AAAAMQDAACAYwABwGAAANAAAADEAwAAxAQAAMCAAADAYAAAwIAAANAAAADEBAAAxAMAAMBgAADAgAAAwGAAAMCAAADQAAAAxAMAAIRjAADAYAAA0AAAAMQEAADEAwAAUGQoAExkOADA4AAAwKAAANAAAADEAwAAgGMAAsBgAADQAAAAxAMAAIBj///AYAAA0AAAAMQDAADEBAAA0AAAAMQDAADEBAAAiGQAANAAAADEAwAAgAQAAGBkGADAYAAA0AAAAMQEAADEAwAAYGQoAIAEAAFcpBgAwGAAANAAAADEBAAAxAMAAERkKACAAwAfaKMoAMCgAADQAAAAxAQAAMQDAADAgAAAwGAAAMwAAFnQAAAAzAAAYMwAAE3QAAAAzAAAYMQDAACABAABXGQYAMBgAADQAAAAzAAAWcwAAE3QAAAAxAMAAIAEAABgZCgAgAQAAVykGADAYAAA0AAAAIADAArAYAAAzAAAAdAAAADEAwAAhGQAAIBjAAGMBAAKwGAAAMCAAACEZQAAwKAAAMwAAAHEBAAAxAMAAIBjAAGAhP//yAAAgNAAAACUAwAAmGMAr8BgAADMAAB9zAAAeZQDAACYYwCowGAAAMwAAH3MAAAGzAAAC4ADAArAYAAAzAAAUsQDAACMAwADzAAAC8wAAAHIAACVzAAARpQDAACYYwCmwGAAAMwAAH0EAAAABAAAAAAAAAEAAAAhAAAABgAAAEgAAABlAAAAbAAAAGwAAABvAAAALAAAABIAAABXAAAAaAAAAGEAAAB0AAAAIAAAAGkAAABzAAAAIAAAAHkAAABvAAAAdQAAAHIAAAAgAAAAbgAAAGEAAABtAAAAZQAAAD8=
out_code_hex: |
  ; Source: <source_path>
  ; Code section (size: 664 bytes)
  0x0000: C800008C  JMP   0x000008C
  0x0001: C4030000  POP   R3
  0x0002: 94040000  LUI   R4, 0x0000
  0x0003: 9884FF01  ORI   R4, R4, 65281
  0x0004: 88830000  STORE R3, 0(R4)
  0x0005: D0000000  RET
  0x0006: 94040000  LUI   R4, 0x0000
  0x0007: 9884FF00  ORI   R4, R4, 65280
  0x0008: 84830000  LOAD  R3, 0(R4)
  0x0009: C0600000  PUSH  R3
  0x000A: D0000000  RET
  0x000B: C4030000  POP   R3
  0x000C: C0600000  PUSH  R3
  0x000D: C0600000  PUSH  R3
  0x000E: D0000000  RET
  0x000F: C4030000  POP   R3
  0x0010: C4040000  POP   R4
  0x0011: C0600000  PUSH  R3
  0x0012: C0800000  PUSH  R4
  0x0013: D0000000  RET
  0x0014: C4050000  POP   R5
  0x0015: C4040000  POP   R4
  0x0016: C4030000  POP   R3
  0x0017: C0800000  PUSH  R4
  0x0018: C0A00000  PUSH  R5
  0x0019: C0600000  PUSH  R3
  0x001A: D0000000  RET
  0x001B: C4030000  POP   R3
  0x001C: D0000000  RET
  0x001D: C4040000  POP   R4
  0x001E: C4030000  POP   R3
  0x001F: 60641800  CMP   R3, R3, R4
  0x0020: C0600000  PUSH  R3
  0x0021: D0000000  RET
  0x0022: C4030000  POP   R3
  0x0023: 80630001  ADDI  R3, R3, 1
  0x0024: C0600000  PUSH  R3
  0x0025: D0000000  RET
  0x0026: C4030000  POP   R3
  0x0027: C4040000  POP   R4
  0x0028: C0800000  PUSH  R4
  0x0029: C0600000  PUSH  R3
  0x002A: C0800000  PUSH  R4
  0x002B: D0000000  RET
  0x002C: C4040000  POP   R4
  0x002D: C4030000  POP   R3
  0x002E: C0600000  PUSH  R3
  0x002F: C0800000  PUSH  R4
  0x0030: C0600000  PUSH  R3
  0x0031: C0800000  PUSH  R4
  0x0032: D0000000  RET
  0x0033: C4030000  POP   R3
  0x0034: 84630000  LOAD  R3, 0(R3)
  0x0035: C0600000  PUSH  R3
  0x0036: D0000000  RET
  0x0037: C4040000  POP   R4
  0x0038: C4030000  POP   R3
  0x0039: 50642800  MOD   R5, R3, R4
  0x003A: 4C643800  DIV   R7, R3, R4
  0x003B: C0E00000  PUSH  R7
  0x003C: C0A00000  PUSH  R5
  0x003D: D0000000  RET
  0x003E: C4030000  POP   R3
  0x003F: 80630002  ADDI  R3, R3, 2
  0x0040: C0600000  PUSH  R3
  0x0041: D0000000  RET
  0x0042: C4030000  POP   R3
  0x0043: 8063FFFF  ADDI  R3, R3, -1
  0x0044: C0600000  PUSH  R3
  0x0045: D0000000  RET
  0x0046: C4030000  POP   R3
  0x0047: C4040000  POP   R4
  0x0048: D0000000  RET
  0x0049: C4030000  POP   R3
  0x004A: C4040000  POP   R4
  0x004B: 88640000  STORE R4, 0(R3)
  0x004C: D0000000  RET
  0x004D: C4030000  POP   R3
  0x004E: 80040000  ADDI  R4, R0, 0
  0x004F: 60641800  CMP   R3, R3, R4
  0x0050: C0600000  PUSH  R3
  0x0051: D0000000  RET
  0x0052: C4040000  POP   R4
  0x0053: C4030000  POP   R3
  0x0054: 60642800  CMP   R5, R3, R4
  0x0055: 80040001  ADDI  R4, R0, 1
  0x0056: 5CA41800  XOR   R3, R5, R4
  0x0057: C0600000  PUSH  R3
  0x0058: D0000000  RET
  0x0059: C4040000  POP   R4
  0x005A: C4030000  POP   R3
  0x005B: 44642800  SUB   R5, R3, R4
  0x005C: 8003001F  ADDI  R3, R0, 31
  0x005D: 68A32800  SHR   R5, R5, R3
  0x005E: C0A00000  PUSH  R5
  0x005F: D0000000  RET
  0x0060: C4040000  POP   R4
  0x0061: C4030000  POP   R3
  0x0062: C0800000  PUSH  R4
  0x0063: C0600000  PUSH  R3
  0x0064: CC000059  CALL  0x0000059
  0x0065: D0000000  RET
  0x0066: CC000060  CALL  0x0000060
  0x0067: CC00004D  CALL  0x000004D
  0x0068: D0000000  RET
  0x0069: CC000060  CALL  0x0000060
  0x006A: C4030000  POP   R3
  0x006B: 80040001  ADDI  R4, R0, 1
  0x006C: 5C641800  XOR   R3, R3, R4
  0x006D: C0600000  PUSH  R3
  0x006E: D0000000  RET
  0x006F: CC000059  CALL  0x0000059
  0x0070: CC00004D  CALL  0x000004D
  0x0071: D0000000  RET
  0x0072: C4030000  POP   R3
  0x0073: 80040000  ADDI  R4, R0, 0
  0x0074: 60642800  CMP   R5, R3, R4
  0x0075: 80040001  ADDI  R4, R0, 1
  0x0076: 5CA41800  XOR   R3, R5, R4
  0x0077: C0600000  PUSH  R3
  0x0078: D0000000  RET
  0x0079: 8003000A  ADDI  R3, R0, 10
  0x007A: C0600000  PUSH  R3
  0x007B: CC000001  CALL  0x0000001
  0x007C: D0000000  RET
  0x007D: C4030000  POP   R3
  0x007E: 84640000  LOAD  R4, 0(R3)
  0x007F: 80630001  ADDI  R3, R3, 1
  0x0080: 8C04000A  JZ    R4, 10
  0x0081: C0600000  PUSH  R3
  0x0082: C0800000  PUSH  R4
  0x0083: 84650000  LOAD  R5, 0(R3)
  0x0084: C0A00000  PUSH  R5
  0x0085: CC000001  CALL  0x0000001
  0x0086: C4040000  POP   R4
  0x0087: C4030000  POP   R3
  0x0088: 80630001  ADDI  R3, R3, 1
  0x0089: 8084FFFF  ADDI  R4, R4, -1
  0x008A: C8000080  JMP   0x0000080
  0x008B: D0000000  RET
  0x008C: 94030000  LUI   R3, 0x0000
  0x008D: 986300AF  ORI   R3, R3, 175
  0x008E: C0600000  PUSH  R3
  0x008F: CC00007D  CALL  0x000007D
  0x0090: CC000079  CALL  0x0000079
  0x0091: 94030000  LUI   R3, 0x0000
  0x0092: 986300A8  ORI   R3, R3, 168
  0x0093: C0600000  PUSH  R3
  0x0094: CC00007D  CALL  0x000007D
  0x0095: CC000006  CALL  0x0000006
  0x0096: CC00000B  CALL  0x000000B
  0x0097: 8003000A  ADDI  R3, R0, 10
  0x0098: C0600000  PUSH  R3
  0x0099: CC000052  CALL  0x0000052
  0x009A: C4030000  POP   R3
  0x009B: 8C030003  JZ    R3, 3
  0x009C: CC00000B  CALL  0x000000B
  0x009D: CC000001  CALL  0x0000001
  0x009E: C8000095  JMP   0x0000095
  0x009F: CC000046  CALL  0x0000046
  0x00A0: 94030000  LUI   R3, 0x0000
  0x00A1: 986300A6  ORI   R3, R3, 166
  0x00A2: C0600000  PUSH  R3
  0x00A3: CC00007D  CALL  0x000007D
  0x00A4: 04000000  HALT
  0x00A5: 04000000  HALT

  ; Data section (size: 112 bytes)
  ; Data words (decimal):
  [1, 33, 6, 72, 101, 108, 108, 111, 44, 18, 87, 104, 97, 116, 32, 105, 115, 32, 121, 111, 117, 114, 32, 110, 97, 109, 101, 63]
  ; Data words (hex):
  [0x00000001, 0x00000021, 0x00000006, 0x00000048, 0x00000065, 0x0000006C, 0x0000006C, 0x0000006F, 0x0000002C, 0x00000012, 0x00000057, 0x00000068, 0x00000061, 0x00000074, 0x00000020, 0x00000069, 0x00000073, 0x00000020, 0x00000079, 0x0000006F, 0x00000075, 0x00000072, 0x00000020, 0x0000006E, 0x00000061, 0x0000006D, 0x00000065, 0x0000003F]
out_stdout: |
  Successfully translated <source_path> to <target_path>
  Total instructions: 166, Data size: 112 bytes
  ============================================================
  Code size: 166 words. Data size: 28 words.

  Simulation output: 'What is your name?
  Hello,Admir!'
  Total ticks: 10776
out_log: |-
  INFO     root:translator.py:678 Patched string 'What is your name?': LUI@idx=140 imm=0x0000, ORI@idx=141 imm=0x00AF -> final_word_addr=0x000000AF
  INFO     root:translator.py:678 Patched string 'Hello,': LUI@idx=145 imm=0x0000, ORI@idx=146 imm=0x00A8 -> final_word_addr=0x000000A8
  INFO     root:translator.py:678 Patched string '!': LUI@idx=160 imm=0x0000, ORI@idx=161 imm=0x00A6 -> final_word_addr=0x000000A6
  INFO     root:machine.py:533 Starting simulation...
  INFO     root:machine.py:483 TICK:    0 | PC: 0x0000 | IR: 0x00000000 (NOP) | SP: 64536 | DSP: 60536 | MicroPC: 0 | Zero: False
  DEBUG    root:machine.py:437 TICK 1: Executing micro-op: LATCH_MAR_PC
  INFO     root:machine.py:483 TICK:    1 | PC: 0x0000 | IR: 0x00000000 (NOP) | SP: 64536 | DSP: 60536 | MicroPC: 1 | Zero: False
  DEBUG    root:machine.py:437 TICK 2: Executing micro-op: CACHE_READ
  WARNING  root:machine.py:65 CACHE: MISS on read at addr 0x0000. Accessing main memory.
  INFO     root:machine.py:483 TICK:    2 | PC: 0x0000 | IR: 0x00000000 (NOP) | SP: 64536 | DSP: 60536 | MicroPC: 2 | Zero: False
  INFO     root:machine.py:271 STALL: 8 cycles remaining.
  INFO     root:machine.py:483 TICK:    3 | PC: 0x0000 | IR: 0x00000000 (NOP) | SP: 64536 | DSP: 60536 | MicroPC: 2 | Zero: False
  INFO     root:machine.py:271 STALL: 7 cycles remaining.
  INFO     root:machine.py:483 TICK:    4 | PC: 0x0000 | IR: 0x00000000 (NOP) | SP: 64536 | DSP: 60536 | MicroPC: 2 | Zero: False
  INFO     root:machine.py:271 STALL: 6 cycles remaining.
  INFO     root:machine.py:483 TICK:    5 | PC: 0x0000 | IR: 0x00000000 (NOP) | SP: 64536 | DSP: 60536 | MicroPC: 2 | Zero: False
  INFO     root:machine.py:271 STALL: 5 cycles remaining.
  INFO     root:machine.py:483 TICK:    6 | PC: 0x0000 | IR: 0x00000000 (NOP) | SP: 64536 | DSP: 60536 | MicroPC: 2 | Zero: False
  INFO     root:machine.py:271 STALL: 4 cycles remaining.
  INFO     root:machine.py:483 TICK:    7 | PC: 0x0000 | IR: 0x00000000 (NOP) | SP: 64536 | DSP: 60536 | MicroPC: 2 | Zero: False
  INFO     root:machine.py:271 STALL: 3 cycles remaining.
  INFO     root:machine.py:483 TICK:    8 | PC: 0x0000 | IR: 0x00000000 (NOP) | SP: 64536 | DSP: 60536 | MicroPC: 2 | Zero: False
  INFO     root:machine.py:271 STALL: 2 cycles remaining.
  INFO     root:machine.py:483 TICK:    9 | PC: 0x0000 | IR: 0x00000000 (NOP) | SP: 64536 | DSP: 60536 | MicroPC: 2 | Zero: False
  INFO     root:machine.py:271 STALL: 1 cycles remaining.
  INFO     root:machine.py:483 TICK:   10 | PC: 0x0000 | IR: 0x00000000 (NOP) | SP: 64536 | DSP: 60536 | MicroPC: 2 | Zero: False
  INFO     root:machine.py:271 STALL: 0 cycles remaining.
  INFO     root:machine.py:483 TICK:   11 | PC: 0x0000 | IR: 0x00000000 (NOP) | SP: 64536 | DSP: 60536 | MicroPC: 2 | Zero: False
  DEBUG    root:machine.py:437 TICK 12: Executing micro-op: LATCH_PC_INC
  INFO     root:machine.py:483 TICK:   12 | PC: 0x0001 | IR: 0x00000000 (NOP) | SP: 64536 | DSP: 60536 | MicroPC: 3 | Zero: False
  DEBUG    root:machine.py:437 TICK 13: Executing micro-op: LATCH_IR
  INFO     root:machine.py:483 TICK:   13 | PC: 0x0001 | IR: 0xC800008C (JMP   0x000008C) | SP: 64536 | DSP: 60536 | MicroPC: 4 | Zero: False
  DEBUG    root:machine.py:437 TICK 14: Executing micro-op: LATCH_PC_ADDR
  INFO     root:machine.py:315 JMP/CALL: Setting PC to 0x008C
  INFO     root:machine.py:483 TICK:   14 | PC: 0x008C | IR: 0xC800008C (JMP   0x000008C) | SP: 64536 | DSP: 60536 | MicroPC: 5 | Zero: False
  DEBUG    root:machine.py:437 TICK 15: Executing micro-op: FINISH_INSTRUCTION
  INFO     root:machine.py:483 TICK:   15 | PC: 0x008C | IR: 0xC800008C (JMP   0x000008C) | SP: 64536 | DSP: 60536 | MicroPC: 0 | Zero: False
  DEBUG    root:machine.py:437 TICK 16: Executing micro-op: LATCH_MAR_PC
  INFO     root:machine.py:483 TICK:   16 | PC: 0x008C | IR: 0xC800008C (JMP   0x000008C) | SP: 64536 | DSP: 60536 | MicroPC: 1 | Zero: False
  DEBUG    root:machine.py:437 TICK 17: Executing micro-op: CACHE_READ
  WARNING  root:machine.py:65 CACHE: MISS on read at addr 0x008C. Accessing main memory.
  INFO     roo
  ... (log truncated)
