# golden/double_add.yml
# Показывает арифметику двойной точности

# -- Входные данные --
in_source: |2-

  VARIABLE A_LOW
  VARIABLE A_HIGH
  VARIABLE B_LOW
  VARIABLE B_HIGH
  VARIABLE CARRY_VAR

  \ Переменные для <U
  VARIABLE UNSIGNED_MASK
  VARIABLE VAL_A
  VARIABLE VAL_B


  : CR 10 EMIT ;
  : DIGIT>CHAR 48 + ;
  : U.SIMPLE
      DUP 10 < IF DIGIT>CHAR EMIT
      ELSE 10 /MOD SWAP U.SIMPLE DIGIT>CHAR EMIT
      THEN ;
  : PRINT-NUMBER U.SIMPLE 32 EMIT ;

  \ <U ( a b -- flag ) - Беззнаковое сравнение "меньше"
  : <U
      VAL_B !
      VAL_A !
      VAL_A @ UNSIGNED_MASK @ XOR
      VAL_B @ UNSIGNED_MASK @ XOR
      < \ Выполняем обычное знаковое сравнение над измененными числами
  ;

  \ D. ( high low -- ) - печать 64-битного числа
  : D.
      SWAP
      S" High: " TYPE PRINT-NUMBER
      S" Low: " TYPE PRINT-NUMBER
      CR ;

  \ D+ ( -- ) - складывает числа из переменных A и B,
  \ результат оставляет на стеке ( low high )
  : D+
      0 CARRY_VAR !
      A_LOW @ B_LOW @ +
      DUP A_LOW @
      <U IF                 \ ИСПОЛЬЗУЕМ БЕЗЗНАКОВОЕ СРАВНЕНИЕ
          1 CARRY_VAR !
      THEN
      A_HIGH @ B_HIGH @ + CARRY_VAR @ + \ -> sum_high
      A_LOW @ B_LOW @ + SWAP
  ;

  \ Инициализация маски для <U
  2147483648 UNSIGNED_MASK !  \ 0x80000000 - знаковый бит

  S" --- Test 1: Addition with carry ---" TYPE CR
  1 A_HIGH !
  4294967295 A_LOW !
  0 B_HIGH !
  2 B_LOW !
  D+ SWAP D. CR

  S" --- Test 2: Simple addition ---" TYPE CR
  0 A_HIGH !
  4096 A_LOW !
  0 B_HIGH !
  8192 B_LOW !
  D+ SWAP D. CR

  HALT

in_stdin: ''

# -- Эталонные выходные данные --
out_code: 
  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
out_code_hex: |
  ; Source: <source_path>
  ; Code section (size: 1444 bytes)
  0x0000: C800011E  JMP   0x000011E
  0x0001: C4030000  POP   R3
  0x0002: 94040000  LUI   R4, 0x0000
  0x0003: 9884FF01  ORI   R4, R4, 65281
  0x0004: 88830000  STORE R3, 0(R4)
  0x0005: D0000000  RET
  0x0006: 94040000  LUI   R4, 0x0000
  0x0007: 9884FF00  ORI   R4, R4, 65280
  0x0008: 84830000  LOAD  R3, 0(R4)
  0x0009: C0600000  PUSH  R3
  0x000A: D0000000  RET
  0x000B: C4030000  POP   R3
  0x000C: C0600000  PUSH  R3
  0x000D: C0600000  PUSH  R3
  0x000E: D0000000  RET
  0x000F: C4030000  POP   R3
  0x0010: C4040000  POP   R4
  0x0011: C0600000  PUSH  R3
  0x0012: C0800000  PUSH  R4
  0x0013: D0000000  RET
  0x0014: C4050000  POP   R5
  0x0015: C4040000  POP   R4
  0x0016: C4030000  POP   R3
  0x0017: C0800000  PUSH  R4
  0x0018: C0A00000  PUSH  R5
  0x0019: C0600000  PUSH  R3
  0x001A: D0000000  RET
  0x001B: C4030000  POP   R3
  0x001C: D0000000  RET
  0x001D: C4040000  POP   R4
  0x001E: C4030000  POP   R3
  0x001F: 60641800  CMP   R3, R3, R4
  0x0020: C0600000  PUSH  R3
  0x0021: D0000000  RET
  0x0022: C4030000  POP   R3
  0x0023: 80630001  ADDI  R3, R3, 1
  0x0024: C0600000  PUSH  R3
  0x0025: D0000000  RET
  0x0026: C4030000  POP   R3
  0x0027: C4040000  POP   R4
  0x0028: C0800000  PUSH  R4
  0x0029: C0600000  PUSH  R3
  0x002A: C0800000  PUSH  R4
  0x002B: D0000000  RET
  0x002C: C4040000  POP   R4
  0x002D: C4030000  POP   R3
  0x002E: C0600000  PUSH  R3
  0x002F: C0800000  PUSH  R4
  0x0030: C0600000  PUSH  R3
  0x0031: C0800000  PUSH  R4
  0x0032: D0000000  RET
  0x0033: C4030000  POP   R3
  0x0034: 84630000  LOAD  R3, 0(R3)
  0x0035: C0600000  PUSH  R3
  0x0036: D0000000  RET
  0x0037: C4040000  POP   R4
  0x0038: C4030000  POP   R3
  0x0039: 50642800  MOD   R5, R3, R4
  0x003A: 4C643800  DIV   R7, R3, R4
  0x003B: C0E00000  PUSH  R7
  0x003C: C0A00000  PUSH  R5
  0x003D: D0000000  RET
  0x003E: C4030000  POP   R3
  0x003F: 80630002  ADDI  R3, R3, 2
  0x0040: C0600000  PUSH  R3
  0x0041: D0000000  RET
  0x0042: C4030000  POP   R3
  0x0043: 8063FFFF  ADDI  R3, R3, -1
  0x0044: C0600000  PUSH  R3
  0x0045: D0000000  RET
  0x0046: C4030000  POP   R3
  0x0047: C4040000  POP   R4
  0x0048: D0000000  RET
  0x0049: C4030000  POP   R3
  0x004A: C4040000  POP   R4
  0x004B: 88640000  STORE R4, 0(R3)
  0x004C: D0000000  RET
  0x004D: C4030000  POP   R3
  0x004E: 80040000  ADDI  R4, R0, 0
  0x004F: 60641800  CMP   R3, R3, R4
  0x0050: C0600000  PUSH  R3
  0x0051: D0000000  RET
  0x0052: C4040000  POP   R4
  0x0053: C4030000  POP   R3
  0x0054: 60642800  CMP   R5, R3, R4
  0x0055: 80040001  ADDI  R4, R0, 1
  0x0056: 5CA41800  XOR   R3, R5, R4
  0x0057: C0600000  PUSH  R3
  0x0058: D0000000  RET
  0x0059: C4040000  POP   R4
  0x005A: C4030000  POP   R3
  0x005B: 44642800  SUB   R5, R3, R4
  0x005C: 8003001F  ADDI  R3, R0, 31
  0x005D: 68A32800  SHR   R5, R5, R3
  0x005E: C0A00000  PUSH  R5
  0x005F: D0000000  RET
  0x0060: C4040000  POP   R4
  0x0061: C4030000  POP   R3
  0x0062: C0800000  PUSH  R4
  0x0063: C0600000  PUSH  R3
  0x0064: CC000059  CALL  0x0000059
  0x0065: D0000000  RET
  0x0066: CC000060  CALL  0x0000060
  0x0067: CC00004D  CALL  0x000004D
  0x0068: D0000000  RET
  0x0069: CC000060  CALL  0x0000060
  0x006A: C4030000  POP   R3
  0x006B: 80040001  ADDI  R4, R0, 1
  0x006C: 5C641800  XOR   R3, R3, R4
  0x006D: C0600000  PUSH  R3
  0x006E: D0000000  RET
  0x006F: CC000059  CALL  0x0000059
  0x0070: CC00004D  CALL  0x000004D
  0x0071: D0000000  RET
  0x0072: C4030000  POP   R3
  0x0073: 80040000  ADDI  R4, R0, 0
  0x0074: 60642800  CMP   R5, R3, R4
  0x0075: 80040001  ADDI  R4, R0, 1
  0x0076: 5CA41800  XOR   R3, R5, R4
  0x0077: C0600000  PUSH  R3
  0x0078: D0000000  RET
  0x0079: 8003000A  ADDI  R3, R0, 10
  0x007A: C0600000  PUSH  R3
  0x007B: CC000001  CALL  0x0000001
  0x007C: D0000000  RET
  0x007D: C4030000  POP   R3
  0x007E: 84640000  LOAD  R4, 0(R3)
  0x007F: 80630001  ADDI  R3, R3, 1
  0x0080: 8C04000A  JZ    R4, 10
  0x0081: C0600000  PUSH  R3
  0x0082: C0800000  PUSH  R4
  0x0083: 84650000  LOAD  R5, 0(R3)
  0x0084: C0A00000  PUSH  R5
  0x0085: CC000001  CALL  0x0000001
  0x0086: C4040000  POP   R4
  0x0087: C4030000  POP   R3
  0x0088: 80630001  ADDI  R3, R3, 1
  0x0089: 8084FFFF  ADDI  R4, R4, -1
  0x008A: C8000080  JMP   0x0000080
  0x008B: D0000000  RET
  0x008C: 8003000A  ADDI  R3, R0, 10
  0x008D: C0600000  PUSH  R3
  0x008E: CC000001  CALL  0x0000001
  0x008F: D0000000  RET
  0x0090: 80030030  ADDI  R3, R0, 48
  0x0091: C0600000  PUSH  R3
  0x0092: C4040000  POP   R4
  0x0093: C4030000  POP   R3
  0x0094: 40641800  ADD   R3, R3, R4
  0x0095: C0600000  PUSH  R3
  0x0096: D0000000  RET
  0x0097: CC00000B  CALL  0x000000B
  0x0098: 8003000A  ADDI  R3, R0, 10
  0x0099: C0600000  PUSH  R3
  0x009A: CC000059  CALL  0x0000059
  0x009B: C4030000  POP   R3
  0x009C: 8C030003  JZ    R3, 3
  0x009D: CC000090  CALL  0x0000090
  0x009E: CC000001  CALL  0x0000001
  0x009F: C80000A7  JMP   0x00000A7
  0x00A0: 8003000A  ADDI  R3, R0, 10
  0x00A1: C0600000  PUSH  R3
  0x00A2: CC000037  CALL  0x0000037
  0x00A3: CC00000F  CALL  0x000000F
  0x00A4: CC000097  CALL  0x0000097
  0x00A5: CC000090  CALL  0x0000090
  0x00A6: CC000001  CALL  0x0000001
  0x00A7: D0000000  RET
  0x00A8: CC000097  CALL  0x0000097
  0x00A9: 80030020  ADDI  R3, R0, 32
  0x00AA: C0600000  PUSH  R3
  0x00AB: CC000001  CALL  0x0000001
  0x00AC: D0000000  RET
  0x00AD: 94030000  LUI   R3, 0x0000
  0x00AE: 98630170  ORI   R3, R3, 368
  0x00AF: C0600000  PUSH  R3
  0x00B0: CC000049  CALL  0x0000049
  0x00B1: 94030000  LUI   R3, 0x0000
  0x00B2: 9863016F  ORI   R3, R3, 367
  0x00B3: C0600000  PUSH  R3
  0x00B4: CC000049  CALL  0x0000049
  0x00B5: 94030000  LUI   R3, 0x0000
  0x00B6: 9863016F  ORI   R3, R3, 367
  0x00B7: C0600000  PUSH  R3
  0x00B8: CC000033  CALL  0x0000033
  0x00B9: 94030000  LUI   R3, 0x0000
  0x00BA: 9863016E  ORI   R3, R3, 366
  0x00BB: C0600000  PUSH  R3
  0x00BC: CC000033  CALL  0x0000033
  0x00BD: C4040000  POP   R4
  0x00BE: C4030000  POP   R3
  0x00BF: 5C641800  XOR   R3, R3, R4
  0x00C0: C0600000  PUSH  R3
  0x00C1: 94030000  LUI   R3, 0x0000
  0x00C2: 98630170  ORI   R3, R3, 368
  0x00C3: C0600000  PUSH  R3
  0x00C4: CC000033  CALL  0x0000033
  0x00C5: 94030000  LUI   R3, 0x0000
  0x00C6: 9863016E  ORI   R3, R3, 366
  0x00C7: C0600000  PUSH  R3
  0x00C8: CC000033  CALL  0x0000033
  0x00C9: C4040000  POP   R4
  0x00CA: C4030000  POP   R3
  0x00CB: 5C641800  XOR   R3, R3, R4
  0x00CC: C0600000  PUSH  R3
  0x00CD: CC000059  CALL  0x0000059
  0x00CE: D0000000  RET
  0x00CF: CC00000F  CALL  0x000000F
  0x00D0: 94030000  LUI   R3, 0x0000
  0x00D1: 986301B5  ORI   R3, R3, 437
  0x00D2: C0600000  PUSH  R3
  0x00D3: CC00007D  CALL  0x000007D
  0x00D4: CC0000A8  CALL  0x00000A8
  0x00D5: 94030000  LUI   R3, 0x0000
  0x00D6: 986301BB  ORI   R3, R3, 443
  0x00D7: C0600000  PUSH  R3
  0x00D8: CC00007D  CALL  0x000007D
  0x00D9: CC0000A8  CALL  0x00000A8
  0x00DA: CC00008C  CALL  0x000008C
  0x00DB: D0000000  RET
  0x00DC: 80030000  ADDI  R3, R0, 0
  0x00DD: C0600000  PUSH  R3
  0x00DE: 94030000  LUI   R3, 0x0000
  0x00DF: 9863016D  ORI   R3, R3, 365
  0x00E0: C0600000  PUSH  R3
  0x00E1: CC000049  CALL  0x0000049
  0x00E2: 94030000  LUI   R3, 0x0000
  0x00E3: 98630169  ORI   R3, R3, 361
  0x00E4: C0600000  PUSH  R3
  0x00E5: CC000033  CALL  0x0000033
  0x00E6: 94030000  LUI   R3, 0x0000
  0x00E7: 9863016B  ORI   R3, R3, 363
  0x00E8: C0600000  PUSH  R3
  0x00E9: CC000033  CALL  0x0000033
  0x00EA: C4040000  POP   R4
  0x00EB: C4030000  POP   R3
  0x00EC: 40641800  ADD   R3, R3, R4
  0x00ED: C0600000  PUSH  R3
  0x00EE: CC00000B  CALL  0x000000B
  0x00EF: 94030000  LUI   R3, 0x0000
  0x00F0: 98630169  ORI   R3, R3, 361
  0x00F1: C0600000  PUSH  R3
  0x00F2: CC000033  CALL  0x0000033
  0x00F3: CC0000AD  CALL  0x00000AD
  0x00F4: C4030000  POP   R3
  0x00F5: 8C030006  JZ    R3, 6
  0x00F6: 80030001  ADDI  R3, R0, 1
  0x00F7: C0600000  PUSH  R3
  0x00F8: 94030000  LUI   R3, 0x0000
  0x00F9: 9863016D  ORI   R3, R3, 365
  0x00FA: C0600000  PUSH  R3
  0x00FB: CC000049  CALL  0x0000049
  0x00FC: 94030000  LUI   R3, 0x0000
  0x00FD: 9863016A  ORI   R3, R3, 362
  0x00FE: C0600000  PUSH  R3
  0x00FF: CC000033  CALL  0x0000033
  0x0100: 94030000  LUI   R3, 0x0000
  0x0101: 9863016C  ORI   R3, R3, 364
  0x0102: C0600000  PUSH  R3
  0x0103: CC000033  CALL  0x0000033
  0x0104: C4040000  POP   R4
  0x0105: C4030000  POP   R3
  0x0106: 40641800  ADD   R3, R3, R4
  0x0107: C0600000  PUSH  R3
  0x0108: 94030000  LUI   R3, 0x0000
  0x0109: 9863016D  ORI   R3, R3, 365
  0x010A: C0600000  PUSH  R3
  0x010B: CC000033  CALL  0x0000033
  0x010C: C4040000  POP   R4
  0x010D: C4030000  POP   R3
  0x010E: 40641800  ADD   R3, R3, R4
  0x010F: C0600000  PUSH  R3
  0x0110: 94030000  LUI   R3, 0x0000
  0x0111: 98630169  ORI   R3, R3, 361
  0x0112: C0600000  PUSH  R3
  0x0113: CC000033  CALL  0x0000033
  0x0114: 94030000  LUI   R3, 0x0000
  0x0115: 9863016B  ORI   R3, R3, 363
  0x0116: C0600000  PUSH  R3
  0x0117: CC000033  CALL  0x0000033
  0x0118: C4040000  POP   R4
  0x0119: C4030000  POP   R3
  0x011A: 40641800  ADD   R3, R3, R4
  0x011B: C0600000  PUSH  R3
  0x011C: CC00000F  CALL  0x000000F
  0x011D: D0000000  RET
  0x011E: 94038000  LUI   R3, 0x8000
  0x011F: C0600000  PUSH  R3
  0x0120: 94030000  LUI   R3, 0x0000
  0x0121: 9863016E  ORI   R3, R3, 366
  0x0122: C0600000  PUSH  R3
  0x0123: CC000049  CALL  0x0000049
  0x0124: 94030000  LUI   R3, 0x0000
  0x0125: 98630171  ORI   R3, R3, 369
  0x0126: C0600000  PUSH  R3
  0x0127: CC00007D  CALL  0x000007D
  0x0128: CC00008C  CALL  0x000008C
  0x0129: 80030001  ADDI  R3, R0, 1
  0x012A: C0600000  PUSH  R3
  0x012B: 94030000  LUI   R3, 0x0000
  0x012C: 9863016A  ORI   R3, R3, 362
  0x012D: C0600000  PUSH  R3
  0x012E: CC000049  CALL  0x0000049
  0x012F: 9403FFFF  LUI   R3, 0xFFFF
  0x0130: 9863FFFF  ORI   R3, R3, 65535
  0x0131: C0600000  PUSH  R3
  0x0132: 94030000  LUI   R3, 0x0000
  0x0133: 98630169  ORI   R3, R3, 361
  0x0134: C0600000  PUSH  R3
  0x0135: CC000049  CALL  0x0000049
  0x0136: 80030000  ADDI  R3, R0, 0
  0x0137: C0600000  PUSH  R3
  0x0138: 94030000  LUI   R3, 0x0000
  0x0139: 9863016C  ORI   R3, R3, 364
  0x013A: C0600000  PUSH  R3
  0x013B: CC000049  CALL  0x0000049
  0x013C: 80030002  ADDI  R3, R0, 2
  0x013D: C0600000  PUSH  R3
  0x013E: 94030000  LUI   R3, 0x0000
  0x013F: 9863016B  ORI   R3, R3, 363
  0x0140: C0600000  PUSH  R3
  0x0141: CC000049  CALL  0x0000049
  0x0142: CC0000DC  CALL  0x00000DC
  0x0143: CC00000F  CALL  0x000000F
  0x0144: CC0000CF  CALL  0x00000CF
  0x0145: CC00008C  CALL  0x000008C
  0x0146: 94030000  LUI   R3, 0x0000
  0x0147: 98630195  ORI   R3, R3, 405
  0x0148: C0600000  PUSH  R3
  0x0149: CC00007D  CALL  0x000007D
  0x014A: CC00008C  CALL  0x000008C
  0x014B: 80030000  ADDI  R3, R0, 0
  0x014C: C0600000  PUSH  R3
  0x014D: 94030000  LUI   R3, 0x0000
  0x014E: 9863016A  ORI   R3, R3, 362
  0x014F: C0600000  PUSH  R3
  0x0150: CC000049  CALL  0x0000049
  0x0151: 80031000  ADDI  R3, R0, 4096
  0x0152: C0600000  PUSH  R3
  0x0153: 94030000  LUI   R3, 0x0000
  0x0154: 98630169  ORI   R3, R3, 361
  0x0155: C0600000  PUSH  R3
  0x0156: CC000049  CALL  0x0000049
  0x0157: 80030000  ADDI  R3, R0, 0
  0x0158: C0600000  PUSH  R3
  0x0159: 94030000  LUI   R3, 0x0000
  0x015A: 9863016C  ORI   R3, R3, 364
  0x015B: C0600000  PUSH  R3
  0x015C: CC000049  CALL  0x0000049
  0x015D: 80032000  ADDI  R3, R0, 8192
  0x015E: C0600000  PUSH  R3
  0x015F: 94030000  LUI   R3, 0x0000
  0x0160: 9863016B  ORI   R3, R3, 363
  0x0161: C0600000  PUSH  R3
  0x0162: CC000049  CALL  0x0000049
  0x0163: CC0000DC  CALL  0x00000DC
  0x0164: CC00000F  CALL  0x000000F
  0x0165: CC0000CF  CALL  0x00000CF
  0x0166: CC00008C  CALL  0x000008C
  0x0167: 04000000  HALT
  0x0168: 04000000  HALT

  ; Data section (size: 348 bytes)
  ; Data words (decimal):
  [0, 0, 0, 0, 0, 0, 0, 0, 35, 45, 45, 45, 32, 84, 101, 115, 116, 32, 49, 58, 32, 65, 100, 100, 105, 116, 105, 111, 110, 32, 119, 105, 116, 104, 32, 99, 97, 114, 114, 121, 32, 45, 45, 45, 31, 45, 45, 45, 32, 84, 101, 115, 116, 32, 50, 58, 32, 83, 105, 109, 112, 108, 101, 32, 97, 100, 100, 105, 116, 105, 111, 110, 32, 45, 45, 45, 5, 72, 105, 103, 104, 58, 4, 76, 111, 119, 58]
  ; Data words (hex):
  [0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000023, 0x0000002D, 0x0000002D, 0x0000002D, 0x00000020, 0x00000054, 0x00000065, 0x00000073, 0x00000074, 0x00000020, 0x00000031, 0x0000003A, 0x00000020, 0x00000041, 0x00000064, 0x00000064, 0x00000069, 0x00000074, 0x00000069, 0x0000006F, 0x0000006E, 0x00000020, 0x00000077, 0x00000069, 0x00000074, 0x00000068, 0x00000020, 0x00000063, 0x00000061, 0x00000072, 0x00000072, 0x00000079, 0x00000020, 0x0000002D, 0x0000002D, 0x0000002D, 0x0000001F, 0x0000002D, 0x0000002D, 0x0000002D, 0x00000020, 0x00000054, 0x00000065, 0x00000073, 0x00000074, 0x00000020, 0x00000032, 0x0000003A, 0x00000020, 0x00000053, 0x00000069, 0x0000006D, 0x00000070, 0x0000006C, 0x00000065, 0x00000020, 0x00000061, 0x00000064, 0x00000064, 0x00000069, 0x00000074, 0x00000069, 0x0000006F, 0x0000006E, 0x00000020, 0x0000002D, 0x0000002D, 0x0000002D, 0x00000005, 0x00000048, 0x00000069, 0x00000067, 0x00000068, 0x0000003A, 0x00000004, 0x0000004C, 0x0000006F, 0x00000077, 0x0000003A]
out_stdout: |
  Successfully translated <source_path> to <target_path>
  Total instructions: 361, Data size: 348 bytes
  ============================================================
  Code size: 361 words. Data size: 87 words.

  Simulation output: '--- Test 1: Addition with carry ---
  High:2 Low:1 

  --- Test 2: Simple addition ---
  High:0 Low:12288 

  '
  Total ticks: 40580
out_log: |-
  INFO     root:translator.py:1002 Patched variable 'VAL_B': LUI@idx=173 imm=0x0000, ORI@idx=174 imm=0x0170 -> final_word_addr=0x00000170
  INFO     root:translator.py:1002 Patched variable 'VAL_A': LUI@idx=177 imm=0x0000, ORI@idx=178 imm=0x016F -> final_word_addr=0x0000016F
  INFO     root:translator.py:1002 Patched variable 'VAL_A': LUI@idx=181 imm=0x0000, ORI@idx=182 imm=0x016F -> final_word_addr=0x0000016F
  INFO     root:translator.py:1002 Patched variable 'UNSIGNED_MASK': LUI@idx=185 imm=0x0000, ORI@idx=186 imm=0x016E -> final_word_addr=0x0000016E
  INFO     root:translator.py:1002 Patched variable 'VAL_B': LUI@idx=193 imm=0x0000, ORI@idx=194 imm=0x0170 -> final_word_addr=0x00000170
  INFO     root:translator.py:1002 Patched variable 'UNSIGNED_MASK': LUI@idx=197 imm=0x0000, ORI@idx=198 imm=0x016E -> final_word_addr=0x0000016E
  INFO     root:translator.py:1002 Patched variable 'CARRY_VAR': LUI@idx=222 imm=0x0000, ORI@idx=223 imm=0x016D -> final_word_addr=0x0000016D
  INFO     root:translator.py:1002 Patched variable 'A_LOW': LUI@idx=226 imm=0x0000, ORI@idx=227 imm=0x0169 -> final_word_addr=0x00000169
  INFO     root:translator.py:1002 Patched variable 'B_LOW': LUI@idx=230 imm=0x0000, ORI@idx=231 imm=0x016B -> final_word_addr=0x0000016B
  INFO     root:translator.py:1002 Patched variable 'A_LOW': LUI@idx=239 imm=0x0000, ORI@idx=240 imm=0x0169 -> final_word_addr=0x00000169
  INFO     root:translator.py:1002 Patched variable 'CARRY_VAR': LUI@idx=248 imm=0x0000, ORI@idx=249 imm=0x016D -> final_word_addr=0x0000016D
  INFO     root:translator.py:1002 Patched variable 'A_HIGH': LUI@idx=252 imm=0x0000, ORI@idx=253 imm=0x016A -> final_word_addr=0x0000016A
  INFO     root:translator.py:1002 Patched variable 'B_HIGH': LUI@idx=256 imm=0x0000, ORI@idx=257 imm=0x016C -> final_word_addr=0x0000016C
  INFO     root:translator.py:1002 Patched variable 'CARRY_VAR': LUI@idx=264 imm=0x0000, ORI@idx=265 imm=0x016D -> final_word_addr=0x0000016D
  INFO     root:translator.py:1002 Patched variable 'A_LOW': LUI@idx=272 imm=0x0000, ORI@idx=273 imm=0x0169 -> final_word_addr=0x00000169
  INFO     root:translator.py:1002 Patched variable 'B_LOW': LUI@idx=276 imm=0x0000, ORI@idx=277 imm=0x016B -> final_word_addr=0x0000016B
  INFO     root:translator.py:1002 Patched variable 'UNSIGNED_MASK': LUI@idx=288 imm=0x0000, ORI@idx=289 imm=0x016E -> final_word_addr=0x0000016E
  INFO     root:translator.py:1002 Patched variable 'A_HIGH': LUI@idx=299 imm=0x0000, ORI@idx=300 imm=0x016A -> final_word_addr=0x0000016A
  INFO     root:translator.py:1002 Patched variable 'A_LOW': LUI@idx=306 imm=0x0000, ORI@idx=307 imm=0x0169 -> final_word_addr=0x00000169
  INFO     root:translator.py:1002 Patched variable 'B_HIGH': LUI@idx=312 imm=0x0000, ORI@idx=313 imm=0x016C -> final_word_addr=0x0000016C
  INFO     root:translator.py:1002 Patched variable 'B_LOW': LUI@idx=318 imm=0x0000, ORI@idx=319 imm=0x016B -> final_word_addr=0x0000016B
  INFO     root:translator.py:1002 Patched variable 'A_HIGH': LUI@idx=333 imm=0x0000, ORI@idx=334 imm=0x016A -> final_word_addr=0x0000016A
  INFO     root:translator.py:1002 Patched variable 'A_LOW': LUI@idx=339 imm=0x0000, ORI@idx=340 imm=0x0169 -> final_word_addr=0x00000169
  INFO     root:translator.py:1002 Patched variable 'B_HIGH': LUI@idx=345 imm=0x0000, ORI@idx=346 imm=0x016C -> final_word_addr=0x0000016C
  INFO     root:translator.py:1002 Patched variable 'B_LOW': LUI@idx=351 imm=0x0000, ORI@idx=352 imm=0x016B -> final_word_addr=0x0000016B
  INFO     root:translator.py:678 Patched string 'High:': LUI@idx=208 imm=0x0000, ORI@idx=209 imm=0x01B5 -> final_word_addr=0x000001B5
  INFO     root:translator.py:678 Patched string 'Low:': LUI@idx=213 imm=0x0000, ORI@idx=214 imm=0x01BB -> final_word_addr=0x000001BB
  INFO     root:translator.py:678 Patched string '--- Test 1: Addition with carry ---': LUI@idx=292 imm=0x0000, ORI@idx=293 imm=0x0171 -> final_word_addr=0x00000171
  INFO     root:translator.py:678 Patched string '--- Test 2: Simple addition ---': LUI@idx=326 imm=0x0000, ORI@idx=327 imm=0x0195 -
  ... (log truncated)
