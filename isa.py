"""
ISA –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è RISC Forth –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
–û–±—â–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è —Ç—Ä–∞–Ω—Å–ª—è—Ç–æ—Ä–∞ –∏ –º–æ–¥–µ–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
"""

from enum import Enum


class Opcode(Enum):
    """–ö–æ–¥—ã –æ–ø–µ—Ä–∞—Ü–∏–π RISC –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
    NOP = 0x00  # –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
    HALT = 0x01  # –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
    LOAD = 0x02  # –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –ø–∞–º—è—Ç–∏
    STORE = 0x03  # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ø–∞–º—è—Ç—å
    PUSH = 0x04  # –ø–æ–ª–æ–∂–∏—Ç—å –Ω–∞ —Å—Ç–µ–∫
    POP = 0x05  # —Å–Ω—è—Ç—å —Å–æ —Å—Ç–µ–∫–∞
    ADD = 0x06  # —Å–ª–æ–∂–µ–Ω–∏–µ
    SUB = 0x07  # –≤—ã—á–∏—Ç–∞–Ω–∏–µ
    MUL = 0x08  # —É–º–Ω–æ–∂–µ–Ω–∏–µ
    DIV = 0x09  # –¥–µ–ª–µ–Ω–∏–µ
    MOD = 0x0A  # –æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è
    AND = 0x0B  # –±–∏—Ç–æ–≤–æ–µ –ò
    OR = 0x0C  # –±–∏—Ç–æ–≤–æ–µ –ò–õ–ò
    XOR = 0x0D  # –±–∏—Ç–æ–≤–æ–µ –∏—Å–∫–ª—é—á–∞—é—â–µ–µ –ò–õ–ò
    CMP = 0x0E  # —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ (==)
    JMP = 0x0F  # –±–µ–∑—É—Å–ª–æ–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥
    JZ = 0x10  # —É—Å–ª–æ–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –µ—Å–ª–∏ –Ω–æ–ª—å
    IN = 0x11  # –≤–≤–æ–¥
    OUT = 0x12  # –≤—ã–≤–æ–¥


class Reg(Enum):
    """–†–µ–≥–∏—Å—Ç—Ä—ã –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
    ZERO = 0  # –≤—Å–µ–≥–¥–∞ 0
    SP = 1  # —É–∫–∞–∑–∞—Ç–µ–ª—å —Å—Ç–µ–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    RSP = 2  # —É–∫–∞–∑–∞—Ç–µ–ª—å —Å—Ç–µ–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤
    TOS = 3  # –≤–µ—Ä—à–∏–Ω–∞ —Å—Ç–µ–∫–∞ (Top Of Stack)
    BASE = 4  # –±–∞–∑–æ–≤—ã–π –∞–¥—Ä–µ—Å
    T1 = 5  # –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä 1
    T2 = 6  # –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä 2
    PC = 7  # —Å—á–µ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥


# MMIO
IO_INPUT_PORT = 0x8000
IO_OUTPUT_PORT = 0x8001

# –ê–¥—Ä–µ—Å–∞ –ø–∞–º—è—Ç–∏
DATA_START = 0x1000
VARIABLES_START = 0x2000
STACK_START = 0x3000
RETURN_STACK_START = 0x4000

# –†–∞–∑–º–µ—Ä—ã
MEMORY_SIZE = 0x10000  # 64K
CACHE_SIZE = 16  # 16 —Å—Ç—Ä–æ–∫ –∫—ç—à–∞
WORD_SIZE = 4  # 32-–±–∏—Ç–Ω—ã–µ —Å–ª–æ–≤–∞


def format_instruction(opcode: Opcode, rs=0, rt=0, rd=0, imm=0, addr=0) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"""
    if opcode == Opcode.LOAD:
        return f"LOAD R{rt}, R{rs}+{imm}"
    elif opcode == Opcode.STORE:
        return f"STORE R{rs}, R{rt}+{imm}"
    elif opcode in [Opcode.ADD, Opcode.SUB, Opcode.MUL, Opcode.DIV, Opcode.MOD,
                    Opcode.AND, Opcode.OR, Opcode.XOR, Opcode.CMP]:
        return f"{opcode.name} R{rd}, R{rs}, R{rt}"
    elif opcode == Opcode.PUSH:
        return f"PUSH R{rs}"
    elif opcode == Opcode.POP:
        return f"POP R{rt}"
    elif opcode == Opcode.JZ:
        return f"JZ R{rs}, 0x{imm:04X}"
    elif opcode == Opcode.JMP:
        return f"JMP 0x{addr:04X}"
    elif opcode == Opcode.IN:
        return f"IN R{rt}, 0x{imm:04X}"
    elif opcode == Opcode.OUT:
        return f"OUT R{rs}, 0x{imm:04X}"
    else:
        return opcode.name


if __name__ == "__main__":
    print("üèóÔ∏è  RISC Forth ISA")
    print("=" * 40)
    print(f"üìã –û–ø–∫–æ–¥—ã: {len(Opcode)} –∫–æ–º–∞–Ω–¥")
    for op in Opcode:
        print(f"  0x{op.value:02X}: {op.name}")

    print(f"\nüîß –†–µ–≥–∏—Å—Ç—Ä—ã: {len(Reg)} —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤")
    for reg in Reg:
        print(f"  R{reg.value}: {reg.name}")

    print(f"\nüíæ –ö–∞—Ä—Ç–∞ –ø–∞–º—è—Ç–∏:")
    print(f"  –î–∞–Ω–Ω—ã–µ:        0x{DATA_START:04X}")
    print(f"  –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:    0x{VARIABLES_START:04X}")
    print(f"  –°—Ç–µ–∫ –¥–∞–Ω–Ω—ã—Ö:   0x{STACK_START:04X}")
    print(f"  –°—Ç–µ–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞: 0x{RETURN_STACK_START:04X}")

    print(f"\nüîå I/O –ø–æ—Ä—Ç—ã:")
    print(f"  –í–≤–æ–¥:  0x{IO_INPUT_PORT:04X}")
    print(f"  –í—ã–≤–æ–¥: 0x{IO_OUTPUT_PORT:04X}")